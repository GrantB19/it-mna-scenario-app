import streamlit as st
import pandas as pd

# Page configuration
st.set_page_config(page_title="IT M&A Scenario App", layout="wide")

# --- Session State Initialization ---
if "infra_catalog" not in st.session_state:
    st.session_state.infra_catalog = pd.DataFrame(columns=["√âl√©ment", "CAPEX (‚Ç¨)", "OPEX (‚Ç¨ / an)"])
if "app_catalog" not in st.session_state:
    st.session_state.app_catalog = pd.DataFrame(columns=["Application", "CAPEX (‚Ç¨)", "OPEX (‚Ç¨ / an)"])
if "entities" not in st.session_state:
    st.session_state.entities = {}

# --- Sidebar Navigation ---
st.sidebar.title("üß≠ Navigation")
page = st.sidebar.radio("Aller √†", ["D√©finir les environnements IT types", "Composer l'environnement d'une entit√©", "Restitution des co√ªts"])

# --- Page 1: D√©finir les environnements IT types ---
if page == "D√©finir les environnements IT types":
    st.title("üîß D√©finir les environnements IT types")

    st.subheader("√âl√©ments d'infrastructure disponibles")
    infra_editor = st.data_editor(st.session_state.infra_catalog, num_rows="dynamic", use_container_width=True)
    st.session_state.infra_catalog = infra_editor

    st.subheader("Applications disponibles")
    app_editor = st.data_editor(st.session_state.app_catalog, num_rows="dynamic", use_container_width=True)
    st.session_state.app_catalog = app_editor

# --- Page 2: Composer l'environnement d'une entit√© ---
elif page == "Composer l'environnement d'une entit√©":
    st.title("üè¢ Composer l'environnement IT d'une entit√© juridique")

    entity_name = st.text_input("Nom de l'entit√© juridique")
    if entity_name:
        st.subheader("S√©lectionner les √©l√©ments d'infrastructure")
        selected_infra = st.multiselect("√âl√©ments d'infrastructure", st.session_state.infra_catalog["√âl√©ment"].tolist())

        st.subheader("S√©lectionner les applications")
        selected_apps = st.multiselect("Applications", st.session_state.app_catalog["Application"].tolist())

        if st.button("Enregistrer l'environnement IT de l'entit√©"):
            st.session_state.entities[entity_name] = {
                "infrastructure": selected_infra,
                "applications": selected_apps
            }
            st.success(f"Environnement IT enregistr√© pour l'entit√© {entity_name}")

    st.divider()
    st.subheader("üìã Entit√©s enregistr√©es")
    for name, config in st.session_state.entities.items():
        st.markdown(f"**{name}**")
        st.write("Infrastructure:", config["infrastructure"])
        st.write("Applications:", config["applications"])

# --- Page 3: Restitution des co√ªts ---
elif page == "Restitution des co√ªts":
    st.title("üìä Restitution des co√ªts par entit√© et par phase M&A")

    phases = ["Pr√©paration au Closing", "Transition (TSA)", "Post-TSA"]
    phase_durations = {
        "Pr√©paration au Closing": 3,
        "Transition (TSA)": 6,
        "Post-TSA": 12
    }

    simulation = []
    for entity, config in st.session_state.entities.items():
        for element in config["infrastructure"]:
            cost_row = st.session_state.infra_catalog[st.session_state.infra_catalog["√âl√©ment"] == element].iloc[0]
            for phase in phases:
                simulation.append({
                    "Entit√©": entity,
                    "√âl√©ment": element,
                    "Type": "Infrastructure",
                    "Phase": phase,
                    "Dur√©e (mois)": phase_durations[phase],
                    "CAPEX (‚Ç¨)": cost_row["CAPEX (‚Ç¨)"] if phase == "Pr√©paration au Closing" else 0,
                    "OPEX (‚Ç¨)": cost_row["OPEX (‚Ç¨ / an)"] * (phase_durations[phase] / 12)
                })
        for app in config["applications"]:
            cost_row = st.session_state.app_catalog[st.session_state.app_catalog["Application"] == app].iloc[0]
            for phase in phases:
                simulation.append({
                    "Entit√©": entity,
                    "√âl√©ment": app,
                    "Type": "Application",
                    "Phase": phase,
                    "Dur√©e (mois)": phase_durations[phase],
                    "CAPEX (‚Ç¨)": cost_row["CAPEX (‚Ç¨)"] if phase == "Pr√©paration au Closing" else 0,
                    "OPEX (‚Ç¨)": cost_row["OPEX (‚Ç¨ / an)"] * (phase_durations[phase] / 12)
                })

    sim_df = pd.DataFrame(simulation)
    st.dataframe(sim_df, use_container_width=True)
